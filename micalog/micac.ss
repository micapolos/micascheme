(library (micalog micac)
  (export micac-string display-micac)
  (import
    (only (micascheme) quasisyntax push lambda list->syntax display define-rule-syntax string-append apply intercalate with map-using syntaxes ... fluent define-case-syntax literal->syntax syntax export ...)
    (only (micalog micac-transformer) module->micac)
    (only (micalog type) module->typed-syntax)
    (only (micac syntax-c) syntax-c)
    (only (micac expand) expand-instrs)
    (only (micac) var)
    (micalog keywords))
  (export (import (micalog keywords)))

  (define-case-syntax (micac-string module ...)
    (fluent (syntaxes module ...)
      ;(map-using module->typed-syntax)
      (map-using module->micac)
      (with $syntaxes (expand-instrs (lambda _ #f) (list->syntax $syntaxes)))
      (push #`(var int x 0))
      (list->syntax)
      (syntax-c)
      (literal->syntax)))

  (define-rule-syntax (display-micac module ...)
    (display (micac-string module ...)))
)
