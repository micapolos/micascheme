(library (micalog verilog)
  (export verilog-string display-verilog)
  (import
    (only (micascheme) display define-rule-syntax string-append apply intercalate with map-using syntaxes ... fluent define-case-syntax literal->syntax syntax export ...)
    (only (code) code-string)
    (rename
      (only (verilog code) module->code)
      (module->code verilog-module->code))
    (rename
      (only (micalog verilog transformer) module->verilog)
      (module->verilog micalog-module->verilog))
    (only (micalog flatten) flatten-module)
    (only (micalog type) module->typed-syntax)
    (micalog keywords))
  (export (import (micalog keywords)))

  (define-case-syntax (verilog-string module ...)
    (fluent (syntaxes module ...)
      (map-using module->typed-syntax)
      (map-using flatten-module)
      (map-using micalog-module->verilog)
      (map-using verilog-module->code)
      (map-using code-string)
      (intercalate "\n")
      (with $it (apply string-append $it))
      (literal->syntax)))

  (define-rule-syntax (display-verilog module ...)
    (display (verilog-string module ...)))
)
