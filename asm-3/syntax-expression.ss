(library (asm-3 syntax-expression)
  (export syntax->expression)
  (import (asm-3 base) (asm-3 expression))

  (define (syntax->expression $lookup $syntax)
    (syntax-case $syntax (+ - bitwise-and bitwise-ior bitwise-xor)
      (id
        (identifier? #'id)
        (identifier-expression #'id))
      (literal
        ((or? boolean? integer? string? char?) (datum literal))
        (pure-expression #'literal))
      ((+ x ...)
        (syntax->op-expression $lookup $syntax))
      ((- x ...)
        (syntax->op-expression $lookup $syntax))
      ((bitwise-and x ...)
        (syntax->op-expression $lookup $syntax))
      ((bitwise-ior x ...)
        (syntax->op-expression $lookup $syntax))
      ((bitwise-xor x ...)
        (syntax->op-expression $lookup $syntax))
      ((id . x)
        (and (identifier? #'id) ($lookup #'id))
        (switch (($lookup #'id) $lookup $syntax)
          ((expression? $expression) $expression)
          ((else $syntax) (syntax->expression $lookup $syntax))))
      ((fn arg ...)
        (apply application-expression
          (syntax->expression $lookup #'fn)
          (map (partial syntax->expression $lookup) #'(arg ...))))
      (other
        (syntax-error #'other "not expression"))))

  (define (syntax->op-expression $lookup $syntax)
    (syntax-case $syntax ()
      ((op x ...)
        (map-expressions
          (lambda ($syntaxes) #`(op #,@$syntaxes))
          (map (partial syntax->expression $lookup) #'(x ...))))))
)
