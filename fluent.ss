(library (fluent)
  (export fluent)
  (import (scheme) (syntax))

  (define-syntax (fluent $syntax)
    (syntax-case $syntax (let)
      ((fluent)
        #'(void))
      ((fluent expr)
        #'expr)
      ((fluent expr (let var with-expr) rest ...)
        (identifier? #'var)
        #'(let ((var expr))
          (fluent with-expr rest ...)))
      ((fluent expr (let (var ...) with-expr) rest ...)
        (for-all identifier? (syntaxes var ...))
        #'(let-values (((var ...) expr))
          (fluent with-expr rest ...)))
      ((fluent (arity expr) (fn arg ...) rest ...)
        (and (integer? (datum arity)) (nonnegative? (datum arity)))
        (let (($tmps (generate-temporaries (iota (datum arity)))))
          #`(let-values (((#,@$tmps) expr))
            (fluent (fn #,@$tmps arg ...) rest ...))))
      ((fluent expr (fn arg ...) rest ...)
        #'(fluent (fn expr arg ...) rest ...)))))
