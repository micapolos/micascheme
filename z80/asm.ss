(library (z80 asm)
  (export
    op->asm?)
  (import
    (rename (micascheme)
      (and %and)
      (or %or)
      (xor %xor)
      (not %not)
      (+ %+))
    (z80 keywords))

  (define-rule-syntax (asm-syntax-case? stx literals (pattern fender body ... ) ...)
    (syntax-case? stx literals (pattern fender (filter-opts (list body ...))) ...))

  (define (op->asm? $op)
    (asm-syntax-case? $op (a nop ld hl)
      ((add a r) (%and (add-3? add) (rx-3? r))
        (db-prefix? r)
        (db-233 #b10 (add-3? add) (rx-3? r))
        (db-offset? r))
      ((and r) (%and (and-3? and) (rx-3? r))
        (db-prefix? r)
        (db-233 #b10 (and-3? and) (rx-3? r))
        (db-offset? r))
      ((inc r) (%and (inc-3? inc) (rx-3? r))
        (db-prefix? r)
        (db-233 #b00 (rx-3? r) (inc-3? inc))
        (db-offset? r))
      ((nop) #t
        (db-8 0))
      ((halt) #t
        (db-8 #b01110110))
      ((ld r1 r2) (%and (r-3? r1) (r-3? r2))
        (db-233 #b01 (r-3? r1) (r-3? r2)))
      ((ld p1 p2) (%and (p-3? p1) (p-3? p2))
        (db-8 #xdd) (db-233 #b01 (p-3? p1) (p-3? p2)))
      ((ld q1 q2) (%and (q-3? q1) (q-3? q2))
        (db-8 #xfd) (db-233 #b01 (q-3? q1) (q-3? q2)))
      ((ld r (hl)) (r-3? r)
        (db-233 #b01 (r-3? r) #b110))
      ((ld (hl) r) (r-3? r)
        (db-233 #b01 #b110 (r-3? r)))
      ((ld r n) (r-3? r)
        (db-233 #b00 (r-3? r) #b110)
        (db-n n))
      ((ld (hl) n) #t
        (db-233 #b00 #b110 #b110)
        (db-n n))))

  (define-rule-syntax (r-3? r)
    (syntax-case? #'r (b c d e h l a)
      (b #b000)
      (c #b001)
      (d #b010)
      (e #b011)
      (h #b100)
      (l #b101)
      (a #b111)))

  (define-rule-syntax (rx-3? r)
    (syntax-case? #'r (+ b c d e h l a hl ix ixh ixl iy iyh iyl)
      (b        #b000)
      (c        #b001)
      (d        #b010)
      (e        #b011)
      (h        #b100)
      (ixh      #b100)
      (iyh      #b100)
      (l        #b101)
      (ixl      #b101)
      (iyl      #b101)
      ((hl)     #b110)
      ((+ ix d) #b110)
      ((+ iy d) #b110)
      (a        #b111)))

  (define-rule-syntax (db-prefix? x)
    (syntax-case? #'x (+ ix ixh ixl ix iyh iyl)
      (ixh      (db-8 #xdd))
      (ixl      (db-8 #xdd))
      ((+ ix d) (db-8 #xdd))
      (iyh      (db-8 #xfd))
      (iyl      (db-8 #xfd))
      ((+ iy d) (db-8 #xfd))))

  (define-rule-syntax (db-offset? x)
    (syntax-case? #'x (+ ix ixh ixl ix iyh iyl)
      ((+ ix d) (db-8 (datum d)))
      ((+ iy d) (db-8 (datum d)))))

  (define-rule-syntax (add-3? x)
    (syntax-case? #'x (add adc sub sbc)
      (add #b000)
      (adc #b001)
      (sub #b010)
      (sbc #b011)))

  (define-rule-syntax (and-3? x)
    (syntax-case? #'x (and or xor cp)
      (and #b100)
      (or  #b101)
      (xor #b110)
      (cp  #b111)))

  (define-rule-syntax (inc-3? x)
    (syntax-case? #'x (inc dec)
      (inc #b100)
      (dec #b101)))

  (define-rule-syntax (p-3? p)
    (syntax-case? #'p (ixh ixl)
      (ixh #b100)
      (ixl #b101)))

  (define-rule-syntax (q-3? q)
    (syntax-case? #'q (iyh iyl)
      (iyh #b100)
      (iyl #b101)))

  (define (db-233 $a $b $c)
    #`(db
      #,(fxior
        (fxarithmetic-shift-left $a 6)
        (fxarithmetic-shift-left $b 3)
        $c)))

  (define (db-8 $a)
    #`(db #,$a))

  (define-rule-syntax (db-n n)
    #'(db n))
)
