(library (zx-next emu z80)
  (export make-z80 make-dispatch-table)
  (import (micascheme))

  (define-record z80
    (
      (immutable regs)
      (immutable mem-ref-proc)
      (immutable mem-set!-proc)
      (immutable io-ref-proc)
      (immutable io-set!-proc)))

  (define-syntax (z80-af z80) (u16-ref (+ z80 #x00)))
  (define-syntax (z80-bc z80) (u16-ref (+ z80 #x02)))
  (define-syntax (z80-de z80) (u16-ref (+ z80 #x04)))
  (define-syntax (z80-hl z80) (u16-ref (+ z80 #x06)))

  (define-syntax (z80-af2 z80) (u16-ref (+ z80 #x08)))
  (define-syntax (z80-bc2 z80) (u16-ref (+ z80 #x0a)))
  (define-syntax (z80-de2 z80) (u16-ref (+ z80 #x0c)))
  (define-syntax (z80-hl2 z80) (u16-ref (+ z80 #x0e)))

  (define-syntax (z80-ix z80) (u16-ref (+ z80 #x10)))
  (define-syntax (z80-iy z80) (u16-ref (+ z80 #x12)))
  (define-syntax (z80-sp z80) (u16-ref (+ z80 #x14)))
  (define-syntax (z80-pc z80) (u16-ref (+ z80 #x16)))

  (define-syntax (z80-mem-ref  z80 addr)    ((ref (u16-ref (+ z80 #x18))) addr))
  (define-syntax (z80-mem-set! z80 addr u8) ((ref (u16-ref (+ z80 #x1a))) addr u8))
  (define-syntax (z80-io-ref   z80 port)    ((ref (u16-ref (+ z80 #x1c))) port))
  (define-syntax (z80-io-set!  z80 port u8) ((ref (u16-ref (+ z80 #x1e))) port u8))

  (define-syntax (make-dispatch-table $syntax)
    (syntax-case $syntax ()
      ((_ z80)
        (let ()
          (define $vector (make-vector 256 #'(lambda () (void))))
          (define (reg-index $reg)
            (case (native-endianness)
              ((little)
                (case $reg
                  ((0) 3)
                  ((1) 2)
                  ((2) 5)
                  ((3) 4)
                  ((4) 7)
                  ((5) 6)
                  ((6) 0)
                  ((7) 1)))
              ((big)
                (case $reg
                  ((0) 2)
                  ((1) 3)
                  ((2) 4)
                  ((3) 5)
                  ((4) 6)
                  ((5) 7)
                  ((6) 1)
                  ((7) 0)))))
          (repeat-indexed (r1 8)
            (repeat-indexed (r2 8)
              (vector-set! $vector
                (fxior (fxsll #b10 6) (fxsll r1 3) r2)
                #`(lambda ()
                  (bytevector-u8-set! $regs #,(reg-index r1)
                    (bytevector-u8-ref $regs #,(reg-index r2)))))))
          #`(lets
            ($z80 z80)
            ($regs (z80-regs $z80))
            ($mem-ref (z80-mem-ref-proc $z80))
            (immutable-vector #,@(vector->list $vector)))))))

  (define-syntax (u8-ref $syntax)
    (syntax-case $syntax ()
      ((u8-ref offset)
        #`(bytevector-u8-ref #,(datum->syntax #'u8-ref 'mem) offset))))

  (define-syntax (u8-set! $syntax)
    (syntax-case $syntax ()
      ((u8-set! offset value)
        #`(bytevector-u8-set! #,(datum->syntax #'u8-set! 'mem) offset value))))
)
