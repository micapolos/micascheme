(library (zx-next assert)
  (export
    fail
    assert
    assert-throws
    (rename
      (%assert-byte assert-byte)
      (%assert-word assert-word)))
  (import
    (zx-next core)
    (zx-next throw)
    (zx-next write)
    (zx-next regs))

  (define-op (fail)
    (writeln-error "fail")
    (throw))

  (define-fragments
    (label-a (dz "a"))
    (label-b (dz "b"))
    (label-c (dz "c"))
    (label-d (dz "d"))
    (label-e (dz "e"))
    (label-h (dz "h"))
    (label-l (dz "l"))
    (label-bc (dz "bc"))
    (label-de (dz "de"))
    (label-hl (dz "hl"))
    (label-ehl (dz "ehl"))
    (label-lde (dz "lde"))
    (label-dehl (dz "dehl"))
    (label-hlde (dz "hlde"))
    (label-ix (dz "ix"))
    (label-iy (dz "iy"))
    (label-nc (dz "nc"))
    (label-z (dz "z"))
    (label-nz (dz "nz"))
    (label-ibc (dz "(bc)"))
    (label-ide (dz "(de)"))
    (label-ihl (dz "(hl)")))

  (define-op (cp-bc-de)
    (ld a b)
    (cp d)
    (when z
      (ld a c)
      (cp e)))

  (define-fragment assert-flag
    (input (fc - 0 ok / 1 failure) (hl label))
    (preserve-all
      (when c
        (preserve (hl)
          (write-ink 4)
          (write "[ERROR] ")
          (write-ink 7)
          (write "assert ")
          (write-ink 4))
        (call write-string)
        (write-ink 7)
        (writeln)
        (throw)))
    (ret))

  (define-fragment assert-byte
    (input (d actual) (e expected) (hl label))
    (preserve-all
      (ld a d)
      (cp e)
      (when nz
        (preserve (de)
          (preserve (hl)
            (write-ink 4)
            (write "[ERROR] ")
            (write-ink 7)
            (write "assert "))
          (call write-string)
          (write #\space)
          (write-ink 2)
          (write #\$))
        (ld a e)
        (preserve (de)
          (call write-byte)
          (write #\space)
          (write-ink 4)
          (write #\$))
        (ld a d)
        (call write-byte)
        (write-ink 7)
        (writeln)
        (throw)))
    (ret))

  (define-fragment assert-ibyte
    (input (e expected) (hl addr))
    (preserve-all
      (ld d (hl))
      (ld a d)
      (cp e)
      (when nz
        (preserve (de)
          (preserve (hl)
            (write-ink 4)
            (write "[ERROR] ")
            (write-ink 7)
            (write "assert ($"))
          (call write-word)
          (write ") ")
          (write-ink 2)
          (write #\$))
        (ld a e)
        (preserve (de)
          (call write-byte)
          (write #\space)
          (write-ink 4)
          (write #\$))
        (ld a d)
        (call write-byte)
        (write-ink 7)
        (writeln)
        (throw)))
    (ret))

  (define-fragment assert-word
    (input (bc actual) (de expected) (hl label))
    (preserve-all
      (cp-bc-de)
      (when nz
        (preserve (bc de)
          (preserve (hl)
            (write-ink 4)
            (write "[ERROR] ")
            (write-ink 7)
            (write "assert "))
          (call write-string)
          (write #\space)
          (write-ink 2)
          (write #\$))
        (ld h d)
        (ld l e)
        (preserve (bc de)
          (call write-word)
          (write #\space)
          (write-ink 4)
          (write #\$))
        (ld h b)
        (ld l c)
        (call write-word)
        (write-ink 7)
        (writeln)
        (throw)))
    (ret))

  (define-fragment assert-iword
    (input (de expected) (hl address))
    (preserve-all
      (ld c (hl))
      (inc hl)
      (ld b (hl))
      (dec hl)
      (cp-bc-de)
      (when nz
        (preserve (bc de)
          (preserve (hl)
            (write-ink 4)
            (write "[ERROR] ")
            (write-ink 7)
            (write "assert ($"))
          (call write-word)
          (write ") ")
          (write-ink 2)
          (write #\$))
        (ld hl de)
        (preserve (bc de)
          (call write-word)
          (write #\space)
          (write-ink 4)
          (write #\$))
        (ld hl bc)
        (call write-word)
        (write-ink 7)
        (writeln)
        (throw)))
    (ret))

  (define-ops (keywords a b c d e h l bc de hl ix iy nc z nz)
    ((assert c) (preserve (af hl) (ccf) (ld hl label-c) (call assert-flag)))
    ((assert nc) (preserve (af hl) (ld hl label-nc) (call assert-flag)))
    ((assert z) (preserve (af hl) (scf) (when z (ccf)) (ld hl label-z) (call assert-flag)))
    ((assert nz) (preserve (af hl) (scf) (when nz (ccf)) (ld hl label-nz) (call assert-flag)))

    ((assert a n) (preserve (de hl) (ld d a) (ld e n) (ld hl label-a) (call assert-byte)))
    ((assert b n) (preserve (de hl) (ld d b) (ld e n) (ld hl label-b) (call assert-byte)))
    ((assert c n) (preserve (de hl) (ld d c) (ld e n) (ld hl label-c) (call assert-byte)))
    ((assert d n) (preserve (de hl) (ex de hl) (ld d h) (ld e n) (ld hl label-d) (call assert-byte)))
    ((assert e n) (preserve (de hl) (ex de hl) (ld d l) (ld e n) (ld hl label-e) (call assert-byte)))
    ((assert h n) (preserve (de hl) (ld d h) (ld e n) (ld hl label-h) (call assert-byte)))
    ((assert l n) (preserve (de hl) (ld d l) (ld e n) (ld hl label-l) (call assert-byte)))

    ((assert bc nn) (preserve (de hl) (ld de nn) (ld hl label-bc) (call assert-word)))
    ((assert de nn) (preserve (bc de hl) (ld b d) (ld c e) (ld de nn) (ld hl label-de) (call assert-word)))
    ((assert hl nn) (preserve (bc de hl) (ld b h) (ld c l) (ld de nn) (ld hl label-hl) (call assert-word)))
    ((assert ix nn) (preserve (bc de hl) (ld b ixh) (ld c ixl) (ld de nn) (ld hl label-ix) (call assert-word)))
    ((assert iy nn) (preserve (bc de hl) (ld b iyh) (ld c iyl) (ld de nn) (ld hl label-iy) (call assert-word)))

    ((assert (bc) n) (preserve (de hl) (ld d (bc)) (ld e n) (ld hl label-ibc) (call assert-byte)))
    ((assert (de) n) (preserve (de hl) (ld d (de)) (ld e n) (ld hl label-ide) (call assert-byte)))
    ((assert (hl) n) (preserve (de hl) (ld d (hl)) (ld e n) (ld hl label-ihl) (call assert-byte)))

    ((%assert-byte (mm) n) (preserve (de hl) (ld e n) (ld hl mm) (call assert-ibyte)))
    ((%assert-word (mm) nn) (preserve (de hl) (ld de nn) (ld hl mm) (call assert-iword))))

  (define-op (assert-throws body ...)
    (catch body ...)
    (when nc
      (writeln-error "Did not throw.")
      (throw)))

  (define-asm assert-regs-expected-colors (ds 20))
  (define-asm assert-regs-actual-colors   (ds 20))
)
