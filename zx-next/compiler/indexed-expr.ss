(library (zx-next compiler indexed-expr)
  (export)
  (import (micascheme))

  (define-keywords local)

  (define (indexed->expr $syntax)
    (syntax-case $syntax (local)
      (((arg-offset . arg-offsets) regs local-offsets 1 (local 0))
        #`(1 #t (ld a (+ ix arg-offset 4))))
      (((arg-offset . arg-offsets) regs local-offsets 2 (local 0))
        #`(2 #t (ld hl (+ ix arg-offset 4))))
      (((arg-offset . arg-offsets) regs local-offsets 3 (local 0))
        #`(3 #t (ld lde (+ ix arg-offset 4))))
      (((arg-offset . arg-offsets) regs local-offsets 4 (local 0))
        #`(4 #t (ld hlde (+ ix arg-offset 4))))

      ((() (reg . regs) local-offsets size (local 0))
        #`(size #f (begin)))

      ((() () (local-offset . local-offsets) 1 (local 0))
        #`(1 #t (ld a (+ ix arg-offset))))
      ((() () (local-offset . local-offsets) 2 (local 0))
        #`(2 #t (ld hl (+ ix arg-offset))))
      ((() () (local-offset . local-offsets) 3 (local 0))
        #`(3 #t (ld lde (+ ix arg-offset))))
      ((() () (local-offset . local-offsets) 4 (local 0))
        #`(4 #t (ld hlde (+ ix arg-offset))))

      (((arg-offset . arg-offsets) regs local-offsets size (arg n))
        (indexed-expr #`(arg-offsets regs local-offsets size (arg #,(- (datum n) 1)))))
      ((() (reg . regs) local-offsets size (arg n))
        #`(1 #f (begin)))))
)
